/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ee.biceps.api.generated.api;

import ee.biceps.api.generated.model.ErrorMessage;
import ee.biceps.api.generated.model.ProductDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-31T00:11:07.611698567+02:00[Europe/Tallinn]")
@Validated
@Tag(name = "products", description = "the products API")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products : Insert a new product.
     * Creates a new product object and save it into database.
     *
     * @param productDTO Information about new product. (optional)
     * @return Returned a new product object with fullfilled id field from database. (status code 201)
     *         or Invalid request body content. (status code 400)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Insert a new product.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned a new product object with fullfilled id field from database.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDTO> addProduct(
        @Parameter(name = "ProductDTO", description = "Information about new product.") @Valid @RequestBody(required = false) ProductDTO productDTO
    ) {
        return getDelegate().addProduct(productDTO);
    }


    /**
     * GET /products : Query a list of products.
     * Collects all the products in databases and returns them as a list.
     *
     * @param maxResults The numbers of items to return. (optional, default to 20)
     * @return Returned a list of products. (status code 200)
     */
    @Operation(
        operationId = "getProducts",
        summary = "Query a list of products.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned a list of products.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDTO>> getProducts(
        @Min(1) @Max(50) @Parameter(name = "maxResults", description = "The numbers of items to return.") @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "20") Integer maxResults
    ) {
        return getDelegate().getProducts(maxResults);
    }


    /**
     * DELETE /products/{productId} : Deletes a product.
     * Searches for a specific product with given id and deletes it from database.
     *
     * @param productId Common ID parameter of product. (required)
     * @return Bus with given ID deleted successfully. (status code 204)
     *         or Bus with given ID not found error. (status code 404)
     */
    @Operation(
        operationId = "removeProduct",
        summary = "Deletes a product.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Bus with given ID deleted successfully."),
            @ApiResponse(responseCode = "404", description = "Bus with given ID not found error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> removeProduct(
        @Parameter(name = "productId", description = "Common ID parameter of product.", required = true) @PathVariable("productId") Integer productId
    ) {
        return getDelegate().removeProduct(productId);
    }


    /**
     * PUT /products/{productId} : Updates product information.
     * Searches for a specific product with given id and updates its data.
     *
     * @param productId Common ID parameter of product. (required)
     * @param productDTO Information about product. (required)
     * @return Returned a updated product object. (status code 200)
     *         or Product with given ID not found error. (status code 404)
     *         or Invalid request body content. (status code 400)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Updates product information.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned a updated product object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product with given ID not found error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDTO> updateProduct(
        @Parameter(name = "productId", description = "Common ID parameter of product.", required = true) @PathVariable("productId") Integer productId,
        @Parameter(name = "ProductDTO", description = "Information about product.", required = true) @Valid @RequestBody ProductDTO productDTO
    ) {
        return getDelegate().updateProduct(productId, productDTO);
    }

}
