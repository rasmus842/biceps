/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ee.biceps.api.generated.api;

import ee.biceps.api.generated.model.Bus;
import ee.biceps.api.generated.model.ErrorMessage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-30T23:16:18.141542013+02:00[Europe/Tallinn]")
@Validated
@Tag(name = "buses", description = "the buses API")
public interface BusesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /buses : Insert a new bus.
     * Creates a new bus bus object and save it into database.
     *
     * @param bus Information about new bus. (optional)
     * @return Returned a new bus object with fullfilled id field from database. (status code 201)
     *         or Invalid request body content. (status code 400)
     */
    @Operation(
        operationId = "createBus",
        summary = "Insert a new bus.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned a new bus object with fullfilled id field from database.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bus.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/buses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Bus> _createBus(
        @Parameter(name = "Bus", description = "Information about new bus.") @Valid @RequestBody(required = false) Bus bus
    ) {
        return createBus(bus);
    }

    // Override this method
    default  ResponseEntity<Bus> createBus(Bus bus) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"licenceNumber\" : \"460TNP\", \"id\" : 0, \"busLineId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /buses/{busId} : Deletes a bus.
     * Searches for a specific bus with given id and deletes it from database.
     *
     * @param busId Common ID parameter of bus. (required)
     * @return Bus with given ID deleted successfully. (status code 204)
     *         or Bus with given ID not found error. (status code 404)
     */
    @Operation(
        operationId = "deleteBus",
        summary = "Deletes a bus.",
        tags = { "BusMangagment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Bus with given ID deleted successfully."),
            @ApiResponse(responseCode = "404", description = "Bus with given ID not found error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/buses/{busId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteBus(
        @Parameter(name = "busId", description = "Common ID parameter of bus.", required = true) @PathVariable("busId") Integer busId
    ) {
        return deleteBus(busId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteBus(Integer busId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /buses : Query a list of buses.
     * Collects all the buses in databases and returnes them as a list.
     *
     * @return Returned a list of buses. (status code 200)
     */
    @Operation(
        operationId = "readBuses",
        summary = "Query a list of buses.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned a list of buses.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bus.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/buses",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Bus>> _readBuses(
        
    ) {
        return readBuses();
    }

    // Override this method
    default  ResponseEntity<List<Bus>> readBuses() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"licenceNumber\" : \"460TNP\", \"id\" : 0, \"busLineId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /buses/{busId} : Updates bus information.
     * Searches for a specific bus with given id and updates its data.
     *
     * @param busId Common ID parameter of bus. (required)
     * @param bus Information about bus. (required)
     * @return Returned a updated bus object. (status code 200)
     *         or Bus with given ID not found error. (status code 404)
     *         or Invalid request body content. (status code 400)
     */
    @Operation(
        operationId = "updateBus",
        summary = "Updates bus information.",
        tags = { "BusMangagment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned a updated bus object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bus.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bus with given ID not found error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/buses/{busId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Bus> _updateBus(
        @Parameter(name = "busId", description = "Common ID parameter of bus.", required = true) @PathVariable("busId") Integer busId,
        @Parameter(name = "Bus", description = "Information about bus.", required = true) @Valid @RequestBody Bus bus
    ) {
        return updateBus(busId, bus);
    }

    // Override this method
    default  ResponseEntity<Bus> updateBus(Integer busId, Bus bus) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"licenceNumber\" : \"460TNP\", \"id\" : 0, \"busLineId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
